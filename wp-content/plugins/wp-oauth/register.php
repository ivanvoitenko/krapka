<?php// TODO: very important that we sanitize all $_POST variables here before using them!// TODO: this doesn't call wpoa_end_login() which might result in the LAST_URL not being cleared...global $wpdb;// initiate the user session:session_start();// prevent users from registering if the option is turned off in the dashboard:if (!get_option("users_can_register")) {    $_SESSION["WPOA"]["RESULT"] = "Sorry, user registration is disabled at this time. Your account could not be registered. Please notify the admin or try again later.";    header("Location: " . $_SESSION["WPOA"]["LAST_URL"]);    exit;}// registration was initiated from an oauth provider, set the username and password automatically.if ($_SESSION["WPOA"]["USER_ID"] != "") {    $args = array(        'order'        => 'DESC', // last registered goes first        'number'       => 1 // limit to the last one, not required    );    $users = get_users( $args );    $last_user_registered = $users[0]; // the first user from the list    $id = $last_user_registered->ID + 1;    $username = 'user'.$id;    $password = wp_generate_password();}// registration was initiated from the standard sign up form, set the username and password that was requested by the user.if ( $_SESSION["WPOA"]["USER_ID"] == "" ) {    // this registration was initiated from the standard Registration page, create account and login the user automatically    $username = $_POST['identity'];    $password = $_POST['password'];}// now attempt to generate the user and get the user id:$user_id = wp_create_user( $username, $password, $_SESSION["WPOA"]["EMAIL"] ); // we use wp_create_user instead of wp_insert_user so we can handle the error when the user being registered already exists// check if the user was actually created:if (is_wp_error($user_id)) {    // there was an error during registration, redirect and notify the user:    $_SESSION["WPOA"]["RESULT"] = $user_id->get_error_message();    header("Location: " . $_SESSION["WPOA"]["LAST_URL"]);    exit;}// now try to update the username to something more permanent and recognizable:$update_nickname_result = update_user_meta($user_id, 'nickname', $_SESSION["WPOA"]["USERNAME"]);// apply the custom default user role:$role = get_option('wpoa_new_user_role');wp_update_user(array(    'ID' => $user_id,    'role' => $role,    'display_name' => $_SESSION["WPOA"]["USERNAME"]));// registration was successful, the user account was created, proceed to login the user automatically...// associate the wordpress user account with the now-authenticated third party account:$this->wpoa_link_account($user_id);// attempt to login the new user (this could be error prone):$creds = array();$creds['user_login'] = $username;$creds['user_password'] = $password;$creds['remember'] = true;$user = wp_signon( $creds, false );// finally redirect the user back to the page they were on and notify them of successful registration:$_SESSION["WPOA"]["RESULT"] = "You have been registered successfully!";$image_url = false;if ($_SESSION["WPOA"]['PROVIDER'] == 'Facebook') {    $curl = curl_init('https://graph.facebook.com/'.$_SESSION["WPOA"]["USER_ID"].'/picture?width=150&height=150&redirect=false');    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);    $result = curl_exec($curl);    $result_obj = json_decode($result, true);    if (isset($result_obj['data']['url'])) {        $image_url = $result_obj['data']['url'];    }} else if ($_SESSION["WPOA"]['PROVIDER'] == 'Google') {    $curl = curl_init('https://www.googleapis.com/plus/v1/people/'.$_SESSION["WPOA"]["USER_ID"].'?fields=image&key=AIzaSyDKUwN0vniZzKdO78tOTQNrM5yw3zWfevI&fields=image&sz=150');    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);    $result = curl_exec($curl);    $result_obj = json_decode($result, true);    if (isset($result_obj['image']['url'])) {        $image_url = $result_obj['image']['url'];    }}if($image_url) {    $get = wp_remote_get( $image_url );    $type = wp_remote_retrieve_header( $get, 'content-type' );    if ( ! $type ) {        return false;    }    $imagename = preg_replace('@\?.*@','', basename( $image_url ));    $mirror = wp_upload_bits( $imagename, '', wp_remote_retrieve_body( $get ) );    $filename = $mirror['file'];    $filetype = wp_check_filetype( $imagename );    $wp_upload_dir = wp_upload_dir();    $attachment = array(        'guid'           => $wp_upload_dir['url'] . '/' . $imagename,        'post_mime_type' => $filetype['type'],        'post_title'     => preg_replace( '/\.[^.]+$/', '', $imagename ),        'post_content'   => '',        'post_status'    => 'inherit'    );    // Insert the attachment.    $attachment_id = wp_insert_attachment( $attachment, $filename );    wp_update_attachment_metadata($attachment_id, wp_generate_attachment_metadata($attachment_id, $file));    // Remove old attachment postmeta    delete_metadata('post', null, '_wp_attachment_wp_user_avatar', $user_id, true);    // Create new attachment postmeta    update_post_meta($attachment_id, '_wp_attachment_wp_user_avatar', $user_id);    // Update usermeta    global $blog_id, $wpdb;    update_user_meta($user_id, $wpdb->get_blog_prefix($blog_id).'user_avatar', $attachment_id);}header("Location: " . $_SESSION["WPOA"]["LAST_URL"]); exit;